{"version":3,"file":"static/js/8624.e21bdbcf.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/ListSubheader/listSubheaderClasses.js","../node_modules/@mui/material/ListSubheader/ListSubheader.js","../node_modules/@mui/material/Autocomplete/autocompleteClasses.js","../node_modules/@mui/material/Autocomplete/Autocomplete.js","../node_modules/@mui/material/internal/svg-icons/Close.js","../node_modules/@mui/material/node_modules/@mui/base/useAutocomplete/useAutocomplete.js","../node_modules/@mui/utils/usePreviousProps/usePreviousProps.js"],"sourcesContent":["import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getListSubheaderUtilityClass(slot) {\n  return generateUtilityClass('MuiListSubheader', slot);\n}\nconst listSubheaderClasses = generateUtilityClasses('MuiListSubheader', ['root', 'colorPrimary', 'colorInherit', 'gutters', 'inset', 'sticky']);\nexport default listSubheaderClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"component\", \"disableGutters\", \"disableSticky\", \"inset\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport { getListSubheaderUtilityClass } from './listSubheaderClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    disableGutters,\n    inset,\n    disableSticky\n  } = ownerState;\n  const slots = {\n    root: ['root', color !== 'default' && `color${capitalize(color)}`, !disableGutters && 'gutters', inset && 'inset', !disableSticky && 'sticky']\n  };\n  return composeClasses(slots, getListSubheaderUtilityClass, classes);\n};\nconst ListSubheaderRoot = styled('li', {\n  name: 'MuiListSubheader',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], !ownerState.disableGutters && styles.gutters, ownerState.inset && styles.inset, !ownerState.disableSticky && styles.sticky];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  boxSizing: 'border-box',\n  lineHeight: '48px',\n  listStyle: 'none',\n  color: (theme.vars || theme).palette.text.secondary,\n  fontFamily: theme.typography.fontFamily,\n  fontWeight: theme.typography.fontWeightMedium,\n  fontSize: theme.typography.pxToRem(14)\n}, ownerState.color === 'primary' && {\n  color: (theme.vars || theme).palette.primary.main\n}, ownerState.color === 'inherit' && {\n  color: 'inherit'\n}, !ownerState.disableGutters && {\n  paddingLeft: 16,\n  paddingRight: 16\n}, ownerState.inset && {\n  paddingLeft: 72\n}, !ownerState.disableSticky && {\n  position: 'sticky',\n  top: 0,\n  zIndex: 1,\n  backgroundColor: (theme.vars || theme).palette.background.paper\n}));\nconst ListSubheader = /*#__PURE__*/React.forwardRef(function ListSubheader(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiListSubheader'\n  });\n  const {\n      className,\n      color = 'default',\n      component = 'li',\n      disableGutters = false,\n      disableSticky = false,\n      inset = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    component,\n    disableGutters,\n    disableSticky,\n    inset\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ListSubheaderRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nListSubheader.muiSkipListHighlight = true;\nprocess.env.NODE_ENV !== \"production\" ? ListSubheader.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'default'\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the List Subheader will not have gutters.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * If `true`, the List Subheader will not stick to the top during scroll.\n   * @default false\n   */\n  disableSticky: PropTypes.bool,\n  /**\n   * If `true`, the List Subheader is indented.\n   * @default false\n   */\n  inset: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListSubheader;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getAutocompleteUtilityClass(slot) {\n  return generateUtilityClass('MuiAutocomplete', slot);\n}\nconst autocompleteClasses = generateUtilityClasses('MuiAutocomplete', ['root', 'expanded', 'fullWidth', 'focused', 'focusVisible', 'tag', 'tagSizeSmall', 'tagSizeMedium', 'hasPopupIcon', 'hasClearIcon', 'inputRoot', 'input', 'inputFocused', 'endAdornment', 'clearIndicator', 'popupIndicator', 'popupIndicatorOpen', 'popper', 'popperDisablePortal', 'paper', 'listbox', 'loading', 'noOptions', 'option', 'groupLabel', 'groupUl']);\nexport default autocompleteClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _ClearIcon, _ArrowDropDownIcon;\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"componentsProps\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"readOnly\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"slotProps\", \"value\"],\n  _excluded2 = [\"ref\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses, useAutocomplete, createFilterOptions } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport inputClasses from '../Input/inputClasses';\nimport inputBaseClasses from '../InputBase/inputBaseClasses';\nimport outlinedInputClasses from '../OutlinedInput/outlinedInputClasses';\nimport filledInputClasses from '../FilledInput/filledInputClasses';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport useForkRef from '../utils/useForkRef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})(({\n  ownerState\n}) => _extends({\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  }\n}, ownerState.fullWidth && {\n  width: '100%'\n}, {\n  [`& .${autocompleteClasses.tag}`]: _extends({\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  }, ownerState.size === 'small' && {\n    margin: 2,\n    maxWidth: 'calc(100% - 4px)'\n  }),\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    flexWrap: 'wrap',\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [`& .${inputClasses.root}`]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${inputClasses.input}`]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [`& .${outlinedInputClasses.root}`]: {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 5px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    // Don't specify paddingRight, as it overrides the default value set when there is only\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 8px'\n    }\n  },\n  [`& .${filledInputClasses.root}`]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${filledInputClasses.input}`]: {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    paddingBottom: 1,\n    [`& .${filledInputClasses.input}`]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 8\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 0,\n    paddingBottom: 0,\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 16,\n      paddingBottom: 17\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 8,\n      paddingBottom: 9\n    }\n  },\n  [`& .${autocompleteClasses.input}`]: _extends({\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  }, ownerState.inputFocused && {\n    opacity: 1\n  })\n}));\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: 'calc(50% - 14px)' // Center vertically\n});\n\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: ({\n    ownerState\n  }, styles) => _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen)\n})(({\n  ownerState\n}) => _extends({\n  padding: 2,\n  marginRight: -2\n}, ownerState.popupOpen && {\n  transform: 'rotate(180deg)'\n}));\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  zIndex: (theme.vars || theme).zIndex.modal\n}, ownerState.disablePortal && {\n  position: 'absolute'\n}));\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(({\n  theme\n}) => _extends({}, theme.typography.body1, {\n  overflow: 'auto'\n}));\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteListbox = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n  position: 'relative',\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    [`&.${autocompleteClasses.focused}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [`&.${autocompleteClasses.focusVisible}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: (theme.vars || theme).palette.action.selected\n        }\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n}));\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(({\n  theme\n}) => ({\n  backgroundColor: (theme.vars || theme).palette.background.paper,\n  top: -8\n}));\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n      autoComplete = false,\n      autoHighlight = false,\n      autoSelect = false,\n      blurOnSelect = false,\n      ChipProps,\n      className,\n      clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n        fontSize: \"small\"\n      })),\n      clearOnBlur = !props.freeSolo,\n      clearOnEscape = false,\n      clearText = 'Clear',\n      closeText = 'Close',\n      componentsProps = {},\n      defaultValue = props.multiple ? [] : null,\n      disableClearable = false,\n      disableCloseOnSelect = false,\n      disabled = false,\n      disabledItemsFocusable = false,\n      disableListWrap = false,\n      disablePortal = false,\n      filterSelectedOptions = false,\n      forcePopupIcon = 'auto',\n      freeSolo = false,\n      fullWidth = false,\n      getLimitTagsText = more => `+${more}`,\n      getOptionLabel = option => {\n        var _option$label;\n        return (_option$label = option.label) != null ? _option$label : option;\n      },\n      groupBy,\n      handleHomeEndKeys = !props.freeSolo,\n      includeInputInList = false,\n      limitTags = -1,\n      ListboxComponent = 'ul',\n      ListboxProps,\n      loading = false,\n      loadingText = 'Loading…',\n      multiple = false,\n      noOptionsText = 'No options',\n      openOnFocus = false,\n      openText = 'Open',\n      PaperComponent = Paper,\n      PopperComponent = Popper,\n      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n      readOnly = false,\n      renderGroup: renderGroupProp,\n      renderInput,\n      renderOption: renderOptionProp,\n      renderTags,\n      selectOnFocus = !props.freeSolo,\n      size = 'medium',\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    expanded,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    ref: externalListboxRef\n  } = ListboxProps != null ? ListboxProps : {};\n  const _getListboxProps = getListboxProps(),\n    {\n      ref: listboxRef\n    } = _getListboxProps,\n    otherListboxProps = _objectWithoutPropertiesLoose(_getListboxProps, _excluded2);\n  const combinedListboxRef = useForkRef(listboxRef, externalListboxRef);\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = _extends({}, props, {\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  let startAdornment;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: classes.tag,\n      disabled\n    }, getTagProps(params));\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/_jsx(\"li\", _extends({}, props2, {\n    children: getOptionLabel(option)\n  }));\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    });\n  };\n  const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;\n  const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;\n  const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;\n  const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: _extends({\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          onClick: event => {\n            if (event.target === event.currentTarget) {\n              handleInputMouseDown(event);\n            }\n          }\n        }, (hasClearIcon || hasPopupIcon) && {\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            ownerState: ownerState,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              ownerState: ownerState\n            }, clearIndicatorSlotProps, {\n              className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              ownerState: ownerState\n            }, popupIndicatorSlotProps, {\n              className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),\n              children: popupIcon\n            })) : null]\n          })\n        }),\n        inputProps: _extends({\n          className: classes.input,\n          disabled,\n          readOnly\n        }, getInputProps())\n      })\n    })), anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, _extends({\n      as: PopperComponent,\n      disablePortal: disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      ownerState: ownerState,\n      role: \"presentation\",\n      anchorEl: anchorEl,\n      open: popupOpen\n    }, popperSlotProps, {\n      className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, _extends({\n        ownerState: ownerState,\n        as: PaperComponent\n      }, paperSlotProps, {\n        className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          ownerState: ownerState,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          ownerState: ownerState,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n          as: ListboxComponent,\n          className: classes.listbox,\n          ownerState: ownerState\n        }, otherListboxProps, ListboxProps, {\n          ref: combinedListboxRef,\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n            return renderListOption(option, index);\n          })\n        })) : null]\n      }))\n    })) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   *\n   * When using `freeSolo` mode, the typed value will be the input value\n   * if the Autocomplete loses focus without highlighting an option.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * Props applied to the [`Chip`](/material-ui/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n *\n * Alias to `Clear`.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","import _extends from \"@babel/runtime/helpers/esm/extends\";\n/* eslint-disable no-constant-condition */\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId, usePreviousProps } from '@mui/utils';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE11 support for this feature\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : string;\n}\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\n\n// To replace with .findIndex() once we stop IE11 support.\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => {\n  var _listboxRef$current$p;\n  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));\n};\nexport default function useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionLabel: getOptionLabelProp = option => {\n      var _option$label;\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, 'reset');\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value);\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  if (process.env.NODE_ENV !== 'production') {\n    if (value !== null && !freeSolo && options.length > 0) {\n      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));\n      if (missingValue.length > 0) {\n        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \\`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\\n'));\n      }\n    }\n  }\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedTag is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {\n        // Move to the next element.\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    //\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const checkHighlightedOptionExists = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        const previousHighlightedOptionExists = filteredOptions.some(option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n        if (previousHighlightedOptionExists) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value hasn't changed\n    // If it exists and the value hasn't changed, return, otherwise continue execution\n    if (checkHighlightedOptionExists()) {\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        case 'Delete':\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (inputValue === '' || !open) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => _extends({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null\n    }, other, {\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index\n    }) => _extends({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1\n    }, !readOnly && {\n      onDelete: handleTagDelete(index)\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}","'use client';\n\nimport * as React from 'react';\nconst usePreviousProps = value => {\n  const ref = React.useRef({});\n  React.useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\nexport default usePreviousProps;"],"names":["getListSubheaderUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","ListSubheaderRoot","styled","name","overridesResolver","props","styles","ownerState","root","color","concat","capitalize","disableGutters","gutters","inset","disableSticky","sticky","_ref","theme","_extends","boxSizing","lineHeight","listStyle","vars","palette","text","secondary","fontFamily","typography","fontWeight","fontWeightMedium","fontSize","pxToRem","primary","main","paddingLeft","paddingRight","position","top","zIndex","backgroundColor","background","paper","ListSubheader","React","inProps","ref","useThemeProps","className","component","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsx","as","clsx","muiSkipListHighlight","getAutocompleteUtilityClass","_ClearIcon","_ArrowDropDownIcon","_excluded2","AutocompleteRoot","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","size","autocompleteClasses","tag","inputRoot","input","focused","clearIndicator","visibility","width","margin","maxWidth","flexWrap","minWidth","inputClasses","paddingBottom","padding","inputBaseClasses","sizeSmall","outlinedInputClasses","endAdornment","right","paddingTop","filledInputClasses","hiddenLabel","flexGrow","textOverflow","opacity","AutocompleteEndAdornment","AutocompleteClearIndicator","IconButton","marginRight","AutocompletePopupIndicator","_ref2","popupIndicator","popupOpen","popupIndicatorOpen","_ref3","transform","AutocompletePopper","Popper","option","popper","disablePortal","popperDisablePortal","_ref4","modal","AutocompletePaper","Paper","_ref5","body1","overflow","AutocompleteLoading","loading","_ref6","AutocompleteNoOptions","noOptions","_ref7","AutocompleteListbox","listbox","_ref8","maxHeight","minHeight","display","justifyContent","alignItems","cursor","outline","WebkitTapHighlightColor","breakpoints","up","action","hover","disabledOpacity","pointerEvents","focusVisible","focus","mainChannel","selectedOpacity","alpha","hoverOpacity","selected","focusOpacity","AutocompleteGroupLabel","groupLabel","_ref9","AutocompleteGroupUl","groupUl","_slotProps$clearIndic","_slotProps$paper","_slotProps$popper","_slotProps$popupIndic","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","clearIcon","ClearIcon","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","componentsProps","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionLabel","_option$label","label","groupBy","handleHomeEndKeys","includeInputInList","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","openOnFocus","openText","PaperComponent","PopperComponent","popupIcon","ArrowDropDownIcon","readOnly","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","selectOnFocus","slotProps","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","value","dirty","expanded","id","focusedTag","anchorEl","setAnchorEl","inputValue","groupedOptions","useAutocomplete","componentName","onMouseDown","handleInputMouseDown","externalListboxRef","_getListboxProps","listboxRef","otherListboxProps","combinedListboxRef","useForkRef","startAdornment","length","getCustomizedTagProps","params","map","index","Chip","Array","isArray","splice","push","children","_jsxs","group","key","defaultRenderOption","props2","renderListOption","optionProps","clearIndicatorSlotProps","paperSlotProps","popperSlotProps","popupIndicatorSlotProps","undefined","InputLabelProps","InputProps","onClick","event","target","currentTarget","title","inputProps","style","clientWidth","role","open","preventDefault","options","option2","index2","createSvgIcon","d","stripDiacritics","string","normalize","replace","createFilterOptions","config","arguments","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","toLowerCase","filteredOptions","filter","candidate","indexOf","slice","findIndex","array","comp","i","defaultFilterOptions","pageSize","defaultIsActiveElementInListbox","_listboxRef$current$p","current","parentElement","contains","document","activeElement","unstable_isActiveElementInListbox","unstable_classNamePrefix","disabledProp","filterOptions","getOptionDisabled","getOptionLabelProp","idProp","inputValueProp","isOptionEqualToValue","onChange","onClose","onHighlightChange","onInputChange","onOpen","openProp","valueProp","useId","optionLabel","String","ignoreFocus","firstFocus","inputRef","setFocusedTag","defaultHighlighted","highlightedIndexRef","setValueState","useControlled","controlled","default","setInputValueState","state","setFocused","resetInputValue","newValue","newInputValue","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","some","value2","previousProps","usePreviousProps","valueChange","listboxAvailable","focusTag","useEventCallback","tagToFocus","querySelector","setHighlightedIndex","reason","removeAttribute","setAttribute","prev","classList","remove","listboxNode","getAttribute","scrollTop","add","scrollHeight","clientHeight","element","scrollBottom","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","direction","nextIndex","nextFocus","nextFocusDisabled","hasAttribute","validOptionIndex","getNextIndex","maxIndex","newIndex","Math","abs","setSelectionRange","syncHighlightedIndex","checkHighlightedOptionExists","every","val","value1","previousHighlightedOption","isSameValue","valueItem","currentOption","itemIndex","optionItem","handleListboxRef","node","setRef","handleOpen","handleClose","handleValue","details","isTouch","selectNewValue","origin","ctrlKey","metaKey","blur","handleFocusTag","nextTag","validTagIndex","handleClear","handleKeyDown","onKeyDown","defaultMuiPrevented","which","stopPropagation","handleFocus","handleBlur","handleInputChange","handleOptionMouseMove","Number","handleOptionTouchStart","handleOptionClick","handleTagDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","Map","reduce","acc","htmlFor","onBlur","onFocus","autoCapitalize","spellCheck","tabIndex","onDelete","onMouseMove","onTouchStart"],"sourceRoot":""}